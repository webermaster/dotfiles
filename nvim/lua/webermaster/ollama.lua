-- --- Utility functions for interacting with Ollama.
-- local M = {}
--
-- --- Checks if the ollama server process is running.
-- -- @return boolean: true if 'ollama serve' is running, false otherwise.
-- function M.is_serving()
--   -- Use pgrep to check for the process. It's cleaner than ps|grep.
--   local cmd = "pgrep -f 'ollama serve'"
--   local handle = io.popen(cmd)
--   if not handle then
--   return false
--   end
--   local output = handle:read("*a")
--   handle:close()
--   -- pgrep returns the PID, so any output means it's running.
--   return output ~= nil and output ~= ""
-- end
--
-- --- Checks if a specific model is available in Ollama.
-- -- @param model_name string: The name of the model to check for (e.g., "llama3")
-- -- @return boolean: true if the model is found, false otherwise.
-- -- @return string|nil: An error message if the command fails.
-- function M.has_model(model_name)
--   if not model_name or model_name == "" then
--   return false, "Model name cannot be empty."
--   end
--
--   local cmd = "ollama list"
--   local handle = io.popen(cmd)
--   if not handle then
--   return false, "Failed to execute 'ollama list'. Is ollama installed and in your PATH?"
--   end
--
--   local output = handle:read("*a")
--   handle:close()
--
--   if output and output ~= "" then
--   -- The model name can be just "llama3" or "llama3:latest".
--   -- We'll check if a line starts with the provided model name.
--   for line in output:gmatch("[^\r\n]+") do
--     if line:match("^" .. model_name) then
--     return true
--     end
--   end
--   return false -- Model not found in the list
--   else
--   -- This can happen if the ollama server is not running.
--   return false, "Could not read output from 'ollama list'. Is the server running?"
--   end
-- end
--
-- --- Checks if a specific Ollama model is currently running via 'ollama run <model_name>'.
-- -- @param model_name string: The name of the model to check for (e.g., "llama3")
-- -- @return boolean: true if 'ollama run <model_name>' is running, false otherwise.
-- function M.is_model_running(model_name)
--   if not model_name or model_name == "" then
--   return false
--   end
--   -- Use pgrep to check for the process.
--   local cmd = "pgrep -f 'ollama run " .. model_name .. "' --full"
--   local handle = io.popen(cmd)
--   if not handle then
--   return false
--   end
--   local output = handle:read("*a")
--   handle:close()
--   -- pgrep returns the PID, so any output means it's running.
--   return output ~= nil and output ~= ""
-- end
--
-- return M
